{"ast":null,"code":"var _jsxFileName = \"G:\\\\TwitterCopy\\\\twitter - Kopie\\\\src\\\\components\\\\Chat\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nconst Chat = () => {\n  _s();\n  const username = 'woodly';\n  const [privateChats, setPrivateChats] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  const getPrivateChats = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/loadePrivateUserChats', {\n        username: username\n      });\n      setPrivateChats(response.data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      await getPrivateChats();\n      socket = io(ENDPOINT);\n      // Hier kannst du loggen, um sicherzustellen, dass die privateChats-Daten korrekt geladen wurden\n      console.log(privateChats);\n\n      // Jetzt kannst du die Logik für den Beitritt zu privaten Chats implementieren\n      if (privateChats.length > 0) {\n        privateChats.forEach(chat => {\n          socket.emit('join', {\n            username,\n            ChatID: chat.ChatID\n          });\n        });\n      }\n    };\n    fetchData();\n\n    // Cleanup: Disconnect socket when component unmounts\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, [ENDPOINT, privateChats, username]);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Hello Chat\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"eFBWWjCCzP8jq8i7lt+YqH0noq8=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","axios","io","jsxDEV","_jsxDEV","socket","Chat","_s","username","privateChats","setPrivateChats","ENDPOINT","getPrivateChats","response","post","data","err","console","error","fetchData","log","length","forEach","chat","emit","ChatID","disconnect","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["G:/TwitterCopy/twitter - Kopie/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport io  from 'socket.io-client';\r\n\r\nlet socket;\r\nconst Chat = () => {\r\n    \r\n    const username = 'woodly';\r\n    const [privateChats, setPrivateChats] = useState([]);  \r\n    const ENDPOINT = 'localhost:5000';\r\n\r\n    const getPrivateChats = async () => {\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/loadePrivateUserChats', { username: username });\r\n            setPrivateChats(response.data);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await getPrivateChats();\r\n            socket = io(ENDPOINT);\r\n            // Hier kannst du loggen, um sicherzustellen, dass die privateChats-Daten korrekt geladen wurden\r\n            console.log(privateChats);\r\n            \r\n            // Jetzt kannst du die Logik für den Beitritt zu privaten Chats implementieren\r\n            if (privateChats.length > 0) {\r\n                privateChats.forEach(chat => {\r\n                    socket.emit('join', { username, ChatID: chat.ChatID });\r\n                });\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n        // Cleanup: Disconnect socket when component unmounts\r\n        return () => {\r\n            if (socket) {\r\n                socket.disconnect();\r\n            }\r\n        };\r\n    }, [ENDPOINT, privateChats, username]);\r\n\r\n    return (\r\n        <h1>Hello Chat</h1>\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,IAAIC,MAAM;AACV,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEf,MAAMC,QAAQ,GAAG,QAAQ;EACzB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMW,QAAQ,GAAG,gBAAgB;EAEjC,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,6CAA6C,EAAE;QAAEN,QAAQ,EAAEA;MAAS,CAAC,CAAC;MACxGE,eAAe,CAACG,QAAQ,CAACE,IAAI,CAAC;IAClC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IACtB;EACJ,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACZ,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMP,eAAe,CAAC,CAAC;MACvBP,MAAM,GAAGH,EAAE,CAACS,QAAQ,CAAC;MACrB;MACAM,OAAO,CAACG,GAAG,CAACX,YAAY,CAAC;;MAEzB;MACA,IAAIA,YAAY,CAACY,MAAM,GAAG,CAAC,EAAE;QACzBZ,YAAY,CAACa,OAAO,CAACC,IAAI,IAAI;UACzBlB,MAAM,CAACmB,IAAI,CAAC,MAAM,EAAE;YAAEhB,QAAQ;YAAEiB,MAAM,EAAEF,IAAI,CAACE;UAAO,CAAC,CAAC;QAC1D,CAAC,CAAC;MACN;IACJ,CAAC;IAEDN,SAAS,CAAC,CAAC;;IAEX;IACA,OAAO,MAAM;MACT,IAAId,MAAM,EAAE;QACRA,MAAM,CAACqB,UAAU,CAAC,CAAC;MACvB;IACJ,CAAC;EACL,CAAC,EAAE,CAACf,QAAQ,EAAEF,YAAY,EAAED,QAAQ,CAAC,CAAC;EAEtC,oBACIJ,OAAA;IAAAuB,QAAA,EAAI;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAE3B,CAAC;AAAAxB,EAAA,CA3CKD,IAAI;AAAA0B,EAAA,GAAJ1B,IAAI;AA6CV,eAAeA,IAAI;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}